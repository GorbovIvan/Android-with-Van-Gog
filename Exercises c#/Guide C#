class Program
{
	static void Main()
	{
		//Переменная — это именованная область памяти.
		//
		//Тип переменной — это формат области памяти, определяющий множество возможных значений
		// переменной и множество допустимых операций над ней.

		int integerNumber;
		// так объявляется переменная: тип (int), затем имя (integerNumber)

		// так осуществляется присваивание
		integerNumber = 10;

		// double - основной тип чисел с плавающей точкой.
		// Можно совмещать объявление и присваивание.
		double realNumber = 12.34;

		// float - тип меньшей точности.
		// Суффикс f говорит, что 1.234 - константа типа float, а не double.
		// Используются в библиотеках работы с графикой в Windows.
		float floatNumber = 1.234f;

		//long (большие целые числа). Часто используется для подсчета миллисекунд. 
		// L - суффикс констант такого типа, чтобы не перепутать их с int.
		long longIntegerNumber = 3000000000000L;

		// Есть и другие типы данных: short, decimal, и т.д.
		// В основном, для чисел вы будете пользоваться int и double, иногда - long и float
	}
}


class Program2
{
	static void Main()
	{
		// Конверсия типов (cast) - это преобразование одного типа переменной в другой 

		int integerNumber = 45;
		double doubleNumber = 34.56;

		doubleNumber = integerNumber;
		// Это неявная конверсия типов: присвоение переменной одного типа 
		// значения переменной другого типа без дополнительных усилий. 
		// Она возможна, когда не происходит потери информации

		integerNumber = (int)doubleNumber;
		// Это явная конверсия типов. В случае, когда конверсия ведет к потере информации
		// (в данном случае - дробной части), необходимо явно обозначать свои намерения
		// по конверсии.

		integerNumber = (int)Math.Round(34.67);
		// Округление лучше всего делать не конверсией, а функцией Round. 
		// Кстати, Math - "математическая библиотека" C# - имеет множество других
		// полезных методов. 

		long longInteger = 4000000000;
		integerNumber = (int)longInteger;
		// При такой конверсии происходит ошибка переполнения, которая, однако, остается
		// незамеченной для компилятора и среды разработки

		// Таким образом можно отловить эти ошибки явно
		checked
		{
			integerNumber = (int)longInteger;
		}
	}


class Program
{
	public static void Main()
	{
		//Строки - это последовательности символов
		string myString = "Hello, world!";

		// + — это операция "приписывания" одной строки к другой:
		string s = "Hello" + " " + "world";

		// Можно обращаться к отдельным символам
		char c = myString[1]; //'e' — нумерация символов с нуля.
		char myChar = 'e'; // одинарные кавычки используются для символов. Двойные — для строк.

		//У строк есть собственные методы и переменные (правильно называть это свойствами),
		//которые позволяют узнать информацию о строке 
		Console.WriteLine(myString.Length);

		myString = myString.Substring(0, 5);
		Console.WriteLine(myString);

		string strangeSymbols = "© 2014 Σγμβόλσ";

		//Тип string может иметь особое значение - null.
		//Это не пустая строка, а отсутствие всякой строки.
		myString = null;

		//Интересно, что тип int такого значения иметь не может.
		//int a=null;

		int number = int.Parse("42"); //Из строки в число
		string numString = 42.ToString(); // Из числа в строку
		double number2 = double.Parse("34.42"); // Зависит от настроек операционной системы

		//Следующий вызов не зависит от настроек и всегда ожидает точку в качестве разделителя:
		number2 = double.Parse("34.42", CultureInfo.InvariantCulture);

		//Следующий вызов не зависит от настроек и всегда использует точку в качестве разделителя:
		string invariantNumber2 = number2.ToString(CultureInfo.InvariantCulture);
		Console.WriteLine(invariantNumber2); //34.42
	}
}